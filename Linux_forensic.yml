---
- name: Interactive Linux Forensics & Audit
  hosts: all
  become: true

  vars_prompt:
    - name: "mode"
      prompt: |
        What would you like to run?
        (Type one of: full, osquery, login, persistence, audit)
      private: no
      default: "full"

  vars:
    hostname: "{{ ansible_hostname }}"
    forensic_log_dir: "/var/log/forensics/{{ hostname }}"
    osquery_output_dir: "/var/log/osquery/{{ hostname }}"
    auth_log_file: "{{ '/var/log/secure' if (ansible_facts['os_family'] == 'RedHat') else '/var/log/auth.log' }}"

  tasks:

    - name: Ensure output directories exist
      file:
        path: "{{ item }}"
        state: directory
        owner: root
        group: root
        mode: '0755'
      loop:
        - "{{ forensic_log_dir }}"
        - "{{ osquery_output_dir }}"

    - name: Check if osqueryi is installed
      command: which osqueryi
      register: osquery_check
      ignore_errors: true

    - name: Warn if osqueryi is not installed
      debug:
        msg: "osqueryi not found — skipping osquery section"
      when: (mode == "full" or mode == "osquery") and osquery_check.rc != 0

    - name: Run osquery forensic data collection
      shell: "{{ item.cmd }}"
      args:
        creates: "{{ item.dest }}"
      loop:
        - { cmd: "osqueryi --json 'SELECT uid, gid, username, description, directory, shell FROM users;' > {{ osquery_output_dir }}/users.json", dest: "{{ osquery_output_dir }}/users.json" }
        - { cmd: "osqueryi --json 'SELECT * FROM logged_in_users;' > {{ osquery_output_dir }}/logged_in_users.json", dest: "{{ osquery_output_dir }}/logged_in_users.json" }
        - { cmd: "osqueryi --json 'SELECT * FROM last;' > {{ osquery_output_dir }}/last_logins.json", dest: "{{ osquery_output_dir }}/last_logins.json" }
        - { cmd: "osqueryi --json 'SELECT pid, name, path, cmdline, username FROM processes;' > {{ osquery_output_dir }}/all_processes.json", dest: "{{ osquery_output_dir }}/all_processes.json" }
        - { cmd: "osqueryi --json 'SELECT pid, name, cmdline FROM processes WHERE uid = 0;' > {{ osquery_output_dir }}/root_processes.json", dest: "{{ osquery_output_dir }}/root_processes.json" }
        - { cmd: "osqueryi --json 'SELECT name, path, status, start_type FROM systemd_services;' > {{ osquery_output_dir }}/systemd_services.json", dest: "{{ osquery_output_dir }}/systemd_services.json" }
        - { cmd: "osqueryi --json 'SELECT name, size, used_by FROM kernel_modules;' > {{ osquery_output_dir }}/kernel_modules.json", dest: "{{ osquery_output_dir }}/kernel_modules.json" }
        - { cmd: "osqueryi --json 'SELECT * FROM crontab;' > {{ osquery_output_dir }}/crontab_entries.json", dest: "{{ osquery_output_dir }}/crontab_entries.json" }
        - { cmd: "osqueryi --json 'SELECT * FROM sudoers;' > {{ osquery_output_dir }}/sudoers.json", dest: "{{ osquery_output_dir }}/sudoers.json" }
        - { cmd: "osqueryi --json 'SELECT path, permissions FROM suid_bin;' > {{ osquery_output_dir }}/suid_binaries.json", dest: "{{ osquery_output_dir }}/suid_binaries.json" }
        - { cmd: "osqueryi --json 'SELECT * FROM startup_items;' > {{ osquery_output_dir }}/startup_items.json", dest: "{{ osquery_output_dir }}/startup_items.json" }
        - { cmd: "osqueryi --json 'SELECT name, version, source FROM rpm_packages;' > {{ osquery_output_dir }}/installed_packages.json", dest: "{{ osquery_output_dir }}/installed_packages.json" }
        - { cmd: "osqueryi --json 'SELECT * FROM process_open_sockets WHERE family = 2;' > {{ osquery_output_dir }}/network_connections.json", dest: "{{ osquery_output_dir }}/network_connections.json" }
        - { cmd: "osqueryi --json 'SELECT * FROM listening_ports;' > {{ osquery_output_dir }}/listening_ports.json", dest: "{{ osquery_output_dir }}/listening_ports.json" }
        - { cmd: "osqueryi --json 'SELECT * FROM shell_history;' > {{ osquery_output_dir }}/shell_history.json", dest: "{{ osquery_output_dir }}/shell_history.json" }
        - { cmd: "osqueryi --json 'SELECT pid, name, path FROM processes WHERE path NOT LIKE \"/usr/%\";' > {{ osquery_output_dir }}/suspicious_processes.json", dest: "{{ osquery_output_dir }}/suspicious_processes.json" }
        - { cmd: "osqueryi --json 'SELECT * FROM file WHERE path = \"/etc/passwd\";' > {{ osquery_output_dir }}/etc_passwd_integrity.json", dest: "{{ osquery_output_dir }}/etc_passwd_integrity.json" }
        - { cmd: "osqueryi --json 'SELECT * FROM usb_devices;' > {{ osquery_output_dir }}/usb_devices.json", dest: "{{ osquery_output_dir }}/usb_devices.json" }
        - { cmd: "osqueryi --json 'SELECT * FROM file WHERE directory = \"/etc\" AND mtime >= (strftime(\"%s\",\"now\") - 86400);' > {{ osquery_output_dir }}/recent_etc_mods.json", dest: "{{ osquery_output_dir }}/recent_etc_mods.json" }
        - { cmd: "osqueryi --json 'SELECT * FROM etc_hosts;' > {{ osquery_output_dir }}/etc_hosts.json", dest: "{{ osquery_output_dir }}/etc_hosts.json" }
        - { cmd: "osqueryi --json 'SELECT * FROM users WHERE uid = 0 AND username != \"root\";' > {{ osquery_output_dir }}/hidden_uid0_users.json", dest: "{{ osquery_output_dir }}/hidden_uid0_users.json" }
        - { cmd: "osqueryi --json 'SELECT pid, name, path FROM processes WHERE on_disk = 0;' > {{ osquery_output_dir }}/deleted_binary_processes.json", dest: "{{ osquery_output_dir }}/deleted_binary_processes.json" }
        - { cmd: "osqueryi --json 'SELECT pid, address, port, protocol FROM listening_ports WHERE port NOT IN (22, 80, 443);' > {{ osquery_output_dir }}/unusual_listening_ports.json", dest: "{{ osquery_output_dir }}/unusual_listening_ports.json" }
        - { cmd: "osqueryi --json 'SELECT * FROM file WHERE path LIKE \"/home/%/.bash_profile\";' > {{ osquery_output_dir }}/bash_profile_hooks.json", dest: "{{ osquery_output_dir }}/bash_profile_hooks.json" }
        - { cmd: "osqueryi --json 'SELECT * FROM shell_history WHERE uid != 0;' > {{ osquery_output_dir }}/user_shell_history.json", dest: "{{ osquery_output_dir }}/user_shell_history.json" }
        - { cmd: "osqueryi --json 'SELECT * FROM process_open_sockets WHERE family = 10;' > {{ osquery_output_dir }}/network_connections_ipv6.json", dest: "{{ osquery_output_dir }}/network_connections_ipv6.json" }
        - { cmd: "osqueryi --json 'SELECT * FROM process_open_sockets;' > {{ osquery_output_dir }}/all_open_sockets.json", dest: "{{ osquery_output_dir }}/all_open_sockets.json" }
        - { cmd: "osqueryi --json 'SELECT * FROM listening_ports WHERE protocol = 6;' > {{ osquery_output_dir }}/tcp_listening_ports.json", dest: "{{ osquery_output_dir }}/tcp_listening_ports.json" }
        - { cmd: "osqueryi --json 'SELECT * FROM listening_ports WHERE protocol = 17;' > {{ osquery_output_dir }}/udp_listening_ports.json", dest: "{{ osquery_output_dir }}/udp_listening_ports.json" }
      when: (mode == "full" or mode == "osquery") and osquery_check.rc == 0

    # Other tasks (login, persistence, audit) should follow here – as you already wrote them, just ensure they use proper YAML quoting rules.


    - name: Run log analysis for login/auth activity
      shell: |
       mkdir -p {{ forensic_log_dir }}
       grep "Accepted" {{ auth_log_file }} | awk '{print "{\"date\":\""$1" "$2" "$3"\", \"user\":\""$9"\", \"ip\":\""$11"\"}"}' > {{ forensic_log_dir }}/ssh_success_logins.json
       grep "Failed password" {{ auth_log_file }} | awk '{print "{\"date\":\""$1" "$2" "$3"\", \"user\":\""$11"\", \"ip\":\""$13"\"}"}' > {{ forensic_log_dir }}/ssh_failed_logins.json
       grep "authentication failure;" {{ auth_log_file }} | awk -F'uid=' '{print "{\"log\":\"" $1 "\", \"uid\":" $2 "}"}' > {{ forensic_log_dir }}/auth_failures.json
       grep "session opened for user root" {{ auth_log_file }} | awk '{print "{\"date\":\""$1" "$2" "$3"\", \"terminal\":\""$6"\", \"pid\":\""$9"\"}"}' > {{ forensic_log_dir }}/root_logins.json
       grep "sudo:" {{ auth_log_file }} | awk '{print "{\"date\":\""$1" "$2" "$3"\", \"message\":\""$0"\"}"}' > {{ forensic_log_dir }}/sudo_usage.json
       grep sshd {{ auth_log_file }} | awk '{print "{\"date\":\""$1" "$2" "$3"\", \"message\":\""$0"\"}"}' > {{ forensic_log_dir }}/sshd_events.json
       grep "session opened\|session closed" {{ auth_log_file }} | awk '{print "{\"date\":\""$1" "$2" "$3"\", \"message\":\""$0"\"}"}' > {{ forensic_log_dir }}/user_sessions.json
       grep "pam_unix" {{ auth_log_file }} | awk '{print "{\"date\":\""$1" "$2" "$3"\", \"message\":\""$0"\"}"}' > {{ forensic_log_dir }}/pam_activity.json
       grep "Failed password" {{ auth_log_file }} | awk '{print $11}' | sort | uniq -c | awk '$1 > 5 {print "{\"ip\":\""$2"\", \"attempts\":"$1"}"}' > {{ forensic_log_dir }}/bruteforce_attempts.json
       awk '$3 ~ /^(20|21|22|23|00|01|02|03|04|05)$/ && /Accepted/' {{ auth_log_file }} | awk '{print "{\"date\":\""$1" "$2" "$3"\", \"user\":\""$9"\", \"ip\":\""$11"\"}"}' > {{ forensic_log_dir }}/nighttime_ssh_logins.json
      when: (mode == "full" or mode == "login")

    - name: Run persistence mechanism checks
      shell: |
       mkdir -p {{ forensic_log_dir }}
       for user in $(cut -f1 -d: /etc/passwd); do crontab -u $user -l 2>/dev/null | awk -v usr="$user" '{print "{\"user\":\""usr"\", \"entry\":\""$0"\"}"}'; done > {{ forensic_log_dir }}/user_crontabs.json
       awk '{print "{\"source\":\"/etc/crontab\", \"entry\":\""$0"\"}"}' /etc/crontab > {{ forensic_log_dir }}/system_crontab.json
       find /etc/cron.* -type f | while read file; do awk -v src="$file" '{print "{\"source\":\""src"\", \"entry\":\""$0"\"}"}' "$file"; done > {{ forensic_log_dir }}/cron_dirs.json
       systemctl list-unit-files --type=service | grep enabled | awk '{print "{\"service\":\""$1"\", \"status\":\""$2"\"}"}' > {{ forensic_log_dir }}/enabled_services.json
       find /etc/systemd/system /lib/systemd/system -name "*.service" -type f 2>/dev/null | while read file; do execstart=$(grep -E '^ExecStart=' "$file" | cut -d= -f2-); echo "{\"service_file\":\"$file\", \"exec_start\":\"$execstart\"}"; done > {{ forensic_log_dir }}/systemd_execstart.json
       find /etc/init.d -type f | while read file; do echo "{\"init_script\":\"$file\"}"; done > {{ forensic_log_dir }}/init_scripts.json
       for userdir in /home/*; do for file in ".bashrc" ".bash_profile"; do filepath="$userdir/$file"; if [ -f "$filepath" ]; then awk -v user=$(basename "$userdir") -v file="$filepath" '{print "{\"user\":\""user"\", \"file\":\""file"\", \"line\":\""$0"\"}"}' "$filepath"; fi; done; done > {{ forensic_log_dir }}/bash_startups.json
       for file in /etc/bashrc /etc/profile /etc/profile.d/*.sh; do [ -f "$file" ] && awk -v f="$file" '{print "{\"file\":\""f"\", \"line\":\""$0"\"}"}' "$file"; done > {{ forensic_log_dir }}/global_bash_startups.json
       systemctl list-units --type=service | grep -iE 'backdoor|reverse|socat|nc|ncat|shell' | awk '{print "{\"suspicious_service\":\""$1"\"}"}' > {{ forensic_log_dir }}/suspicious_services.json
       if [ -x /etc/rc.d/rc.local ]; then awk '{print "{\"file\":\"/etc/rc.d/rc.local\", \"line\":\""$0"\"}"}' /etc/rc.d/rc.local > {{ forensic_log_dir }}/rc_local.json; fi
      when: (mode == "full" or mode == "persistence")

    - name: User and Privilege Escalation Audit
      shell: |
       mkdir -p {{ forensic_log_dir }}
       awk -F: '{print "{\"user\":\""$1"\", \"uid\":"$3", \"gid\":"$4", \"home\":\""$6"\", \"shell\":\""$7"\"}"}' /etc/passwd > {{ forensic_log_dir }}/all_users.json
       awk -F: '($3 == 0) {print "{\"user\":\""$1"\", \"uid\":"$3"}"}' /etc/passwd > {{ forensic_log_dir }}/root_equiv_users.json
       /usr/bin/getent group sudo > {{ forensic_log_dir }}/sudo_group.json
       grep -v '^#' /etc/sudoers /etc/sudoers.d/* 2>/dev/null | awk '{print "{\"line\":\""$0"\"}"}' > {{ forensic_log_dir }}/sudoers_entries.json
       grep -Po '^%?\S+\s+ALL=\(ALL(:ALL)?\)\s+ALL' /etc/sudoers /etc/sudoers.d/* 2>/dev/null | awk '{print "{\"sudo_entry\":\""$0"\"}"}' > {{ forensic_log_dir }}/sudo_privileged_users.json
       awk -F: '($2 == "" || $2 == "*" || $2 == "!" ) {print "{\"user\":\""$1"\", \"passwd_field\":\""$2"\"}"}' /etc/shadow > {{ forensic_log_dir }}/empty_passwords.json
       find / -perm -4000 -type f 2>/dev/null | awk '{print "{\"suid_binary\":\""$0"\"}"}' > {{ forensic_log_dir }}/suid_binaries.json
       find / -perm -2000 -type f 2>/dev/null | awk '{print "{\"sgid_binary\":\""$0"\"}"}' > {{ forensic_log_dir }}/sgid_binaries.json
       find / -xdev -type f -perm -002 2>/dev/null | awk '{print "{\"world_writable_file\":\""$0"\"}"}' > {{ forensic_log_dir }}/world_writable_files.json
       ls -l /etc/passwd | awk '{print "{\"file\":\"/etc/passwd\", \"permissions\":\""$1"\", \"owner\":\""$3"\", \"group\":\""$4"\"}"}' > {{ forensic_log_dir }}/passwd_permissions.json
       ls -l /etc/shadow | awk '{print "{\"file\":\"/etc/shadow\", \"permissions\":\""$1"\", \"owner\":\""$3"\", \"group\":\""$4"\"}"}' > {{ forensic_log_dir }}/shadow_permissions.json
      when: (mode == "full" or mode == "audit")

